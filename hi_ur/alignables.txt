# -*- protobuffer -*- festus.AlignablesSpec
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2016, 2017 Google, Inc.
# Author: mjansche@google.com (Martin Jansche)

# Orthographic correspondences between Hindi (transliterated Devanagari
# codepoints) and Urdu (transliterated Perso-Arabic codepoints).

input_label_type: SYMBOL
output_label_type: SYMBOL

input_symbol { value: 0x0901 key: "candrabindu" }
input_symbol { value: 0x0902 key: "anusvara" }
input_symbol { value: 0x0903 key: "visarga" }
input_symbol { value: 0x0905 key: "a" }
input_symbol { value: 0x0906 key: "aa" }
input_symbol { value: 0x0907 key: "i" }
input_symbol { value: 0x0908 key: "ii" }
input_symbol { value: 0x0909 key: "u" }
input_symbol { value: 0x090A key: "uu" }
input_symbol { value: 0x090B key: "ri" }
input_symbol { value: 0x090D key: "candra_e" }
input_symbol { value: 0x090F key: "ee" }
input_symbol { value: 0x0910 key: "ai" }
input_symbol { value: 0x0911 key: "candra_o" }
input_symbol { value: 0x0913 key: "oo" }
input_symbol { value: 0x0914 key: "au" }
input_symbol { value: 0x0915 key: "ka" }
input_symbol { value: 0x0916 key: "kha" }
input_symbol { value: 0x0917 key: "ga" }
input_symbol { value: 0x0918 key: "gha" }
input_symbol { value: 0x0919 key: "nga" }
input_symbol { value: 0x091A key: "ca" }
input_symbol { value: 0x091B key: "cha" }
input_symbol { value: 0x091C key: "ja" }
input_symbol { value: 0x091D key: "jha" }
input_symbol { value: 0x091E key: "nya" }
input_symbol { value: 0x091F key: "tta" }
input_symbol { value: 0x0920 key: "ttha" }
input_symbol { value: 0x0921 key: "dda" }
input_symbol { value: 0x0922 key: "ddha" }
input_symbol { value: 0x0923 key: "nna" }
input_symbol { value: 0x0924 key: "ta" }
input_symbol { value: 0x0925 key: "tha" }
input_symbol { value: 0x0926 key: "da" }
input_symbol { value: 0x0927 key: "dha" }
input_symbol { value: 0x0928 key: "na" }
input_symbol { value: 0x092A key: "pa" }
input_symbol { value: 0x092B key: "pha" }
input_symbol { value: 0x092C key: "ba" }
input_symbol { value: 0x092D key: "bha" }
input_symbol { value: 0x092E key: "ma" }
input_symbol { value: 0x092F key: "ya" }
input_symbol { value: 0x0930 key: "ra" }
input_symbol { value: 0x0932 key: "la" }
input_symbol { value: 0x0933 key: "lla" }
input_symbol { value: 0x0935 key: "va" }
input_symbol { value: 0x0936 key: "sha" }
input_symbol { value: 0x0937 key: "ssa" }
input_symbol { value: 0x0938 key: "sa" }
input_symbol { value: 0x0939 key: "ha" }
input_symbol { value: 0x093C key: "nukta" }
input_symbol { value: 0x093E key: "-aa" }
input_symbol { value: 0x093F key: "-i" }
input_symbol { value: 0x0940 key: "-ii" }
input_symbol { value: 0x0941 key: "-u" }
input_symbol { value: 0x0942 key: "-uu" }
input_symbol { value: 0x0943 key: "-ri" }
input_symbol { value: 0x0945 key: "-candra_e" }
input_symbol { value: 0x0947 key: "-ee" }
input_symbol { value: 0x0948 key: "-ai" }
input_symbol { value: 0x0949 key: "-candra_o" }
input_symbol { value: 0x094B key: "-oo" }
input_symbol { value: 0x094C key: "-au" }
input_symbol { value: 0x094D key: "virama" }

output_symbol { value: 0x0621 key: "'" }
output_symbol { value: 0x0622 key: "AA" }
output_symbol { value: 0x0624 key: "'w" }
output_symbol { value: 0x0626 key: "'y" }
output_symbol { value: 0x0627 key: "|" }
output_symbol { value: 0x0628 key: "b" }
output_symbol { value: 0x062A key: "t" }
output_symbol { value: 0x062B key: "se" }
output_symbol { value: 0x062C key: "j" }
output_symbol { value: 0x062D key: "bari_he" }
output_symbol { value: 0x062E key: "Kh" }
output_symbol { value: 0x062F key: "d" }
output_symbol { value: 0x0630 key: "zal" }
output_symbol { value: 0x0631 key: "r" }
output_symbol { value: 0x0632 key: "z" }
output_symbol { value: 0x0633 key: "s" }
output_symbol { value: 0x0634 key: "sh" }
output_symbol { value: 0x0635 key: "swad" }
output_symbol { value: 0x0636 key: "zwad" }
output_symbol { value: 0x0637 key: "toe" }
output_symbol { value: 0x0638 key: "zoe" }
output_symbol { value: 0x0639 key: "ain" }
output_symbol { value: 0x063A key: "Gh" }
output_symbol { value: 0x0641 key: "f" }
output_symbol { value: 0x0642 key: "q" }
output_symbol { value: 0x0644 key: "l" }
output_symbol { value: 0x0645 key: "m" }
output_symbol { value: 0x0646 key: "n" }
output_symbol { value: 0x0648 key: "w" }
output_symbol { value: 0x064B key: "tanwin" }
output_symbol { value: 0x064E key: "a" }
output_symbol { value: 0x064F key: "u" }
output_symbol { value: 0x0650 key: "i" }
output_symbol { value: 0x0651 key: ":" }
output_symbol { value: 0x0652 key: "0" }
output_symbol { value: 0x0654 key: "-'" }
output_symbol { value: 0x0658 key: "-N" }
output_symbol { value: 0x0670 key: "-|" }
output_symbol { value: 0x0679 key: "tt" }
output_symbol { value: 0x067E key: "p" }
output_symbol { value: 0x0686 key: "c" }
output_symbol { value: 0x0688 key: "dd" }
output_symbol { value: 0x0691 key: "rr" }
output_symbol { value: 0x0698 key: "zh" }
output_symbol { value: 0x06A9 key: "k" }
output_symbol { value: 0x06AF key: "g" }
output_symbol { value: 0x06BA key: "N" }
output_symbol { value: 0x06BE key: "+h" }
output_symbol { value: 0x06C1 key: "h" }
output_symbol { value: 0x06C2 key: "'h" }
output_symbol { value: 0x06CC key: "y" }
output_symbol { value: 0x06D2 key: "Y" }
output_symbol { value: 0x06D3 key: "'Y" }

# Regular correspondences in core Hindustani vocabulary

alignable { input: "candrabindu"      output: "n -N" }
alignable { input: "candrabindu"      output: "n" }
alignable { input: "candrabindu"      output: "N" }
alignable { input: "anusvara"         output: "n -N" }
alignable { input: "anusvara"         output: "n" }
alignable { input: "anusvara"         output: "N" }
alignable { input: "anusvara"         output: "m" }
alignable { input: "visarga"          output: "" }

alignable { input: "a"                output: "| a" }       # initially
alignable { input: "a"                output: "|" }         # initially
alignable { input: "aa"               output: "AA" }        # initially
alignable { input: "aa"               output: "|" }         # medially
alignable { input: "i"                output: "| i" }       # initially
alignable { input: "i"                output: "|" }         # initially
alignable { input: "i"                output: "'y" }        # medially
alignable { input: "ii"               output: "| i y 0" }
alignable { input: "ii"               output: "| i y" }
alignable { input: "ii"               output: "| y" }
alignable { input: "ii"               output: "'y i y 0" }  # medially
alignable { input: "ii"               output: "'y i y" }
alignable { input: "ii"               output: "'y y" }
alignable { input: "u"                output: "| u" }       # intially
alignable { input: "u"                output: "|" }         # initially
alignable { input: "u"                output: "'w" }        # medially
alignable { input: "uu"               output: "| u w 0" }   # initially
alignable { input: "uu"               output: "| u w" }     # initially
alignable { input: "uu"               output: "| w" }       # initially
alignable { input: "uu"               output: "'w" }        # medially
alignable { input: "ri"               output: "r" }
alignable { input: "ri"               output: "r i" }
alignable { input: "candra_e"         output: "| y" }       # initially
alignable { input: "ee"               output: "| Y" }       # isolated
alignable { input: "ee"               output: "| y 0" }     # initially
alignable { input: "ee"               output: "| y" }       # initially
alignable { input: "ee"               output: "Y" }         # finally
alignable { input: "ee"               output: "'Y" }        # finally
alignable { input: "ee"               output: "y" }         # medially
alignable { input: "ee"               output: "'y" }        # medially
alignable { input: "ai"               output: "| a Y" }     # isolated
alignable { input: "ai"               output: "| Y" }       # isolated
alignable { input: "ai"               output: "| a y 0" }   # initially
alignable { input: "ai"               output: "| a y" }     # initially
alignable { input: "ai"               output: "| y" }       # initially
alignable { input: "ai"               output: "Y" }         # finally
alignable { input: "ai"               output: "'Y" }        # finally
alignable { input: "ai"               output: "y" }         # medially
alignable { input: "ai"               output: "'y" }        # medially
alignable { input: "candra_o"         output: "AA" }
alignable { input: "oo"               output: "| w 0" }     # initially
alignable { input: "oo"               output: "| w" }       # initially
alignable { input: "oo"               output: "'w 0" }      # medially
alignable { input: "oo"               output: "'w" }        # medially
alignable { input: "au"               output: "| a w" }     # initially
alignable { input: "au"               output: "| w" }       # initially

alignable { input: "-aa"              output: "|" }
alignable { input: "-i"               output: "i" }
alignable { input: "-i"               output: "" }
alignable { input: "-i"               output: "i y" }       # finally
alignable { input: "-i"               output: "y" }         # finally
alignable { input: "-ii"              output: "i y 0" }
alignable { input: "-ii"              output: "i y" }
alignable { input: "-ii"              output: "y" }
alignable { input: "-u"               output: "u" }
alignable { input: "-u"               output: "" }
alignable { input: "-u"               output: "u w" }       # finally
alignable { input: "-u"               output: "w" }         # finally
alignable { input: "-uu"              output: "u w 0" }
alignable { input: "-uu"              output: "u w" }
alignable { input: "-uu"              output: "w" }
alignable { input: "-ri"              output: "0 r i" }
alignable { input: "-ri"              output: "r i" }
alignable { input: "-ri"              output: "r" }
alignable { input: "-ee"              output: "Y" }         # finally
alignable { input: "-ee"              output: "y 0" }
alignable { input: "-ee"              output: "y" }
alignable { input: "-ai"              output: "a Y" }       # finally
alignable { input: "-ai"              output: "Y" }         # finally
alignable { input: "-ai"              output: "a y 0" }
alignable { input: "-ai"              output: "a y" }
alignable { input: "-ai"              output: "y" }
alignable { input: "-candra_o"        output: "w 0" }
alignable { input: "-candra_o"        output: "w" }
alignable { input: "-oo"              output: "w 0" }
alignable { input: "-oo"              output: "w" }
alignable { input: "-au"              output: "a w 0" }
alignable { input: "-au"              output: "a w" }
alignable { input: "-au"              output: "w" }

alignable { input: "ka"               output: "k" }
alignable { input: "ka virama ka"     output: "k :" }
alignable { input: "ka virama ka"     output: "k" }
alignable { input: "ka nukta"         output: "q" }
alignable { input: "ka nukta virama ka nukta"  output: "q" }
alignable { input: "kha"              output: "k +h" }
alignable { input: "ka virama kha"    output: "k : +h" }
alignable { input: "ka virama kha"    output: "k +h" }
alignable { input: "kha virama kha"   output: "k : +h" }
alignable { input: "kha virama kha"   output: "k +h" }
alignable { input: "kha nukta"        output: "Kh" }
alignable { input: "ga"               output: "g" }
alignable { input: "ga nukta"         output: "Gh" }
alignable { input: "gha"              output: "g +h" }
alignable { input: "nga"              output: "n" }

alignable { input: "ca"               output: "c" }
alignable { input: "cha"              output: "c +h" }
alignable { input: "ca virama cha"    output: "c : +h" }
alignable { input: "ca virama cha"    output: "c +h" }
alignable { input: "ja"               output: "j" }
alignable { input: "ja nukta"         output: "z" }
alignable { input: "ja virama nya"    output: "g 0 y" }
alignable { input: "ja virama nya"    output: "g y" }
alignable { input: "jha"              output: "j +h" }
alignable { input: "jha nukta"        output: "zh" }
alignable { input: "nya"              output: "n" }

alignable { input: "tta"              output: "tt" }
alignable { input: "tta virama tta"   output: "tt :" }
alignable { input: "tta virama tta"   output: "tt" }
alignable { input: "ttha"             output: "tt +h" }
alignable { input: "tta virama ttha"  output: "tt : +h" }
alignable { input: "tta virama ttha"  output: "tt +h" }
alignable { input: "dda"              output: "dd" }
alignable { input: "dda nukta"        output: "rr" }
alignable { input: "ddha"             output: "dd +h" }
alignable { input: "ddha nukta"       output: "rr +h" }
alignable { input: "nna"              output: "n" }
alignable { input: "nna virama nna"   output: "n :" }
alignable { input: "nna virama nna"   output: "n" }

alignable { input: "ta"               output: "t" }
alignable { input: "ta virama ta"     output: "t :" }
alignable { input: "ta virama ta"     output: "t" }
alignable { input: "tha"              output: "t +h" }
alignable { input: "ta virama tha"    output: "t : +h" }
alignable { input: "ta virama tha"    output: "t +h" }
alignable { input: "da"               output: "d" }
alignable { input: "da virama da"     output: "d :" }
alignable { input: "da virama da"     output: "d" }
alignable { input: "dha"              output: "d +h" }
alignable { input: "da virama dha"    output: "d : +h" }
alignable { input: "da virama dha"    output: "d +h" }
alignable { input: "na"               output: "n" }
alignable { input: "na virama na"     output: "n :" }
alignable { input: "na virama na"     output: "n" }

alignable { input: "pa"               output: "p" }
alignable { input: "pa virama pa"     output: "p :" }
alignable { input: "pa virama pa"     output: "p" }
alignable { input: "pha"              output: "p +h" }
alignable { input: "pha nukta"        output: "f" }
alignable { input: "ba"               output: "b" }
alignable { input: "bha"              output: "b +h" }
alignable { input: "ma"               output: "m" }
alignable { input: "ma virama ma"     output: "m :" }
alignable { input: "ma virama ma"     output: "m" }

alignable { input: "ya"               output: "y" }
alignable { input: "ya virama ya"     output: "y :" }
alignable { input: "ya virama ya"     output: "y" }
alignable { input: "ya"               output: "y h" }       # finally
alignable { input: "ra"               output: "r" }
alignable { input: "ra virama ra"     output: "r :" }
alignable { input: "ra virama ra"     output: "r" }
alignable { input: "la"               output: "l" }
alignable { input: "la virama la"     output: "l :" }
alignable { input: "la virama la"     output: "l" }
alignable { input: "va"               output: "w"}
alignable { input: "va virama va"     output: "w :"}
alignable { input: "va virama va"     output: "w"}
alignable { input: "sha"              output: "sh" }
alignable { input: "ssa"              output: "sh" }
alignable { input: "sa"               output: "s" }
alignable { input: "sa virama sa"     output: "s :" }
alignable { input: "sa virama sa"     output: "s" }
alignable { input: "ha"               output: "h" }

alignable { input: "virama"           output: "0" }
alignable { input: "virama"           output: "" }

# Irregular correspondences and correspondences in extended vocabulary

## Loanwords from Arabic, Persian, Marathi, etc.

alignable { input: "a"                output: "ain a" }
alignable { input: "a"                output: "ain" }
alignable { input: "aa"               output: "ain |" }
alignable { input: "aa"               output: "ain h" }  # finally
alignable { input: "i"                output: "ain" }
alignable { input: "ii"               output: "ain y" }
alignable { input: "u"                output: "ain" }
alignable { input: "au"               output: "ain w" }

alignable { input: "-aa"              output: "| '" }      # rare
alignable { input: "-aa"              output: "| ain" }
alignable { input: "-aa"              output: "| h" }      # finally
alignable { input: "-aa"              output: "ain" }      # finally
alignable { input: "-aa"              output: "ain h" }    # finally
alignable { input: "-aa"              output: "h" }        # finally
alignable { input: "-uu"              output: "w ain" }
alignable { input: "-ee"              output: "y h" }      # finally
alignable { input: "-ee"              output: "h" }        # finally
alignable { input: "-ee"              output: "ain" }

alignable { input: "ja nukta"         output: "zal" }
alignable { input: "ja nukta"         output: "zwad" }
alignable { input: "ja nukta"         output: "zoe" }
alignable { input: "ta"               output: "toe" }
alignable { input: "ta virama ta"     output: "toe" }
alignable { input: "ya"               output: "Y" }
alignable { input: "lla"              output: "l" }
alignable { input: "sa"               output: "se" }
alignable { input: "sa"               output: "swad" }
alignable { input: "ha"               output: "bari_he" }
alignable { input: "ha"               output: "bari_he |" }

# Scrambled order near hamzah

alignable { input: "-i ya"            output: "'y y" }  # "y 'y" expected

alignable { input: "candrabindu va"   output: "'w N" }  # "N w" expected
alignable { input: "anusvara va"      output: "'w N" }  # "N w" expected
alignable { input: "-uu a"            output: "'w" }    # "w '|" expected

## Vowel length mismatches

### Irregular shortening

alignable { input: "ii"               output: "'y" }
alignable { input: "-aa"              output: "" }
alignable { input: "-ii"              output: "" }
alignable { input: "-ee"              output: "" }
alignable { input: "-oo"              output: "" }

### Irregular lengthening

alignable { input: "a"                output: "AA" }
alignable { input: "i"                output: "| y" }
alignable { input: "i"                output: "'y y" }
alignable { input: "u"                output: "| w" }
alignable { input: "ee"               output: "'y y" }

alignable { input: "ka"               output: "k |" }
alignable { input: "ka virama ka"     output: "k |" }
alignable { input: "ka nukta"         output: "q |" }
alignable { input: "ka"               output: "q |" }
alignable { input: "kha"              output: "k +h |" }
alignable { input: "kha nukta"        output: "Kh |" }
alignable { input: "ga"               output: "g |" }
alignable { input: "ga nukta"         output: "Gh |" }
alignable { input: "gha"              output: "g +h |" }
alignable { input: "ca"               output: "c |" }
alignable { input: "cha"              output: "c +h |" }
alignable { input: "ja"               output: "j |" }
alignable { input: "jha"              output: "j +h |" }
alignable { input: "tta"              output: "tt |" }
alignable { input: "ttha"             output: "tt +h |" }
alignable { input: "dda"              output: "dd |" }
alignable { input: "ddha"             output: "dd +h |" }
alignable { input: "nna"              output: "n |" }
alignable { input: "ta"               output: "t |" }
alignable { input: "tha"              output: "t +h |" }
alignable { input: "da"               output: "d |" }
alignable { input: "dha"              output: "d +h |" }
alignable { input: "na"               output: "n |" }
alignable { input: "na virama na"     output: "n |" }
alignable { input: "pa"               output: "p |" }
alignable { input: "pha"              output: "p +h |" }
alignable { input: "ba"               output: "b |" }
alignable { input: "bha"              output: "b +h |" }
alignable { input: "ma"               output: "m |" }
alignable { input: "ya"               output: "y |" }
alignable { input: "ra"               output: "r |" }
alignable { input: "la"               output: "l |" }
alignable { input: "la virama la"     output: "l |" }
alignable { input: "va"               output: "w |" }
alignable { input: "sa"               output: "s |" }
alignable { input: "ha"               output: "h |" }

## Missing nukta

alignable { input: "ka"               output: "q" }
alignable { input: "kha"              output: "Kh" }
alignable { input: "ga"               output: "Gh" }
alignable { input: "ja"               output: "z" }
alignable { input: "jha"              output: "zh" }
alignable { input: "pha"              output: "f" }

## Miscellaneous

alignable { input: "ya"               output: "'y Y" }      # finally
alignable { input: "ya"               output: "'y" }
alignable { input: "ra"               output: "r h" }       # finally
alignable { input: "la virama la"     output: "h l" }       # Delhi
alignable { input: "la virama ha"     output: "l +h" }
alignable { input: "sa"               output: "z" }         # Times etc.
alignable { input: "ha"               output: "" }

alignable { input: "-aa ba -aa da"    output: "AA b | d" }  # in toponyms
alignable { input: "-candra_o"        output: "|" }
