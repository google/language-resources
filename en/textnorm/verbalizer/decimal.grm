# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2016 and onwards, Google, Inc.

# Afrikaans verbalizer for decimals.
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;
import 'digit.grm' as d;
import 'ordinal.grm' as o;

negative = (universal_rules.decimal_negative : (c.MINUS_NAME " "))
         | (universal_rules.decimal_positive : "");

binary_decimal =
  universal_rules.quote
  c.CARDINAL
  universal_rules.quote <1>;

# we only quote digits if there is a leading zero
quoted_digit =
  "\"0" universal_rules.sigma_star @ d.QUOTED_DIGIT;

style1 = Optimize[
  negative?
  universal_rules.decimal_integer
  universal_rules.quote
    c.CARDINAL ("" : " point ")
  universal_rules.quote
  universal_rules.decimal_fraction
    (quoted_digit | binary_decimal)
  universal_rules.del_space_star
];

style2 = Optimize[
  negative?
  universal_rules.decimal_integer
  universal_rules.quote
    c.CARDINAL
  universal_rules.quote
  (("" : " comma ") universal_rules.decimal_fraction universal_rules.double_quote* universal_rules.del_space_star)?
  universal_rules.decimal_positive*
];

style_sing = Optimize[
  negative?
  universal_rules.decimal_integer
    ("1" : "one") universal_rules.del_space_star
];

style3 = Optimize[
  negative? ("" : " comma ")
  universal_rules.decimal_fraction
    (universal_rules.quote
     (quoted_digit | binary_decimal) universal_rules.quote
    )
  universal_rules.decimal_negative*
];

export EXPONENT =
  universal_rules.decimal_exponent
  ("" : " times ten to the power ")
  universal_rules.quote
    o.ORDINAL
  universal_rules.quote
;

export DECIMAL = Optimize[(style1 | style2 | style3) EXPONENT?];

export DECIMAL_MARKUP = Optimize[
  universal_rules.decimal
  universal_rules.opening_brace
    DECIMAL
  universal_rules.closing_brace
];

export DECIMAL_MARKUP_SINGULAR = Optimize[
  universal_rules.decimal
  universal_rules.opening_brace
    style_sing
  universal_rules.closing_brace
];
