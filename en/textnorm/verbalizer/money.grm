# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2016 and onwards, Google, Inc.

# Currencies for Afrikaans.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c ;
import 'decimal.grm' as d ;


discard_number = universal_rules.quote ("-" : "")? (universal_rules.factorized_number : "") universal_rules.quote;
discard_currency = universal_rules.kAlpha+ : "";
# Projecting prefix on input because we still need it to be there
# for when we use c.CARDINAL
non_zero_short_germanic_factorized_number = universal_rules.non_zero_factorized_number;
en = "" : " en_conj ";
ins_min =  ("" : " min ");
quantities = ("1000" : "thousand") |
             ("1000000" : "million") |
             ("1000000000" : "billion") |
             ("1000000000000" : "trillion");

major_unit_single = StringFile[
    'money_major_single.txt'];
# major_unit_plural = StringFile[
#     'money_major_plural.txt'];
major_country_single = StringFile[
    'money_country_major_single.txt'];
major_country_plural = StringFile[
    'money_country_major_plural.txt'];
# Just using 'cent' for all minor units.
minor_unit = (universal_rules.kLower+) : " sent ";

minor_plural_markup = universal_rules.money_currency universal_rules.quote minor_unit universal_rules.quote;
minor_single_markup = universal_rules.money_currency universal_rules.quote minor_unit universal_rules.quote;
major_single_markup = universal_rules.money_currency universal_rules.quote major_unit_single universal_rules.quote;
major_country_single_markup =
   universal_rules.money_currency universal_rules.quote major_country_single universal_rules.quote;
major_country_plural_markup =
   universal_rules.money_currency universal_rules.quote major_country_plural universal_rules.quote;
minor_country_single_markup = universal_rules.money_currency universal_rules.quote minor_unit universal_rules.quote;
minor_country_plural_markup = universal_rules.money_currency universal_rules.quote minor_unit universal_rules.quote;
discard_currency_markup = universal_rules.money_currency universal_rules.quote discard_currency universal_rules.quote;


# Reads just the major part of the money amount, discards the fraction and
# exponent
major_part = universal_rules.money_amount universal_rules.opening_brace
             (universal_rules.decimal_negative ins_min)?
             universal_rules.decimal_integer universal_rules.quote c.CARDINAL universal_rules.quote
             (universal_rules.decimal_fraction discard_number)?
             (universal_rules.decimal_exponent discard_number)?
             universal_rules.closing_brace;
# Reads just the minor part of the money amount, discards the integer.
minor_part = universal_rules.money_amount universal_rules.opening_brace
             universal_rules.decimal_negative?
             (universal_rules.decimal_integer discard_number)?
             universal_rules.decimal_fraction universal_rules.quote c.CARDINAL universal_rules.quote
             d.EXPONENT?
             universal_rules.closing_brace;

# Generates verbalization of either major or minor part with
# specialization for a singular form for 1.
func MoneyPart[part, single_markup, plural_markup] {
  return ((part @ "one") universal_rules.ins_space single_markup<-20>) |
         ((part universal_rules.ins_space plural_markup)<-10>);
}

# style1: tien euro en vijftig cent, tien dollar en vijftig cent
style1 = major_part universal_rules.ins_space major_single_markup
         universal_rules.style1
         universal_rules.closing_brace
         universal_rules.money
         universal_rules.opening_brace
         en
         MoneyPart[minor_part, minor_single_markup, minor_plural_markup]
         universal_rules.style1;

# style2: tien euro, tien dollar, tien euro vijftig, tien dollar vijftig
style2 = major_part universal_rules.ins_space major_single_markup
         universal_rules.style2?
         universal_rules.closing_brace
         universal_rules.money
         universal_rules.opening_brace
         universal_rules.ins_space
         minor_part
         discard_currency_markup
         universal_rules.style2?;

# style3: tien amerikaanse dollar en vijftig cent
style3 = MoneyPart[major_part,
                   major_country_single_markup,
                   major_country_plural_markup]
         universal_rules.style3
         universal_rules.closing_brace
         universal_rules.money
         universal_rules.opening_brace
         en
         MoneyPart[minor_part, minor_single_markup, minor_plural_markup]
         universal_rules.style3;

# Anything with a quantity.
with_quantity = universal_rules.money_amount universal_rules.opening_brace d.DECIMAL universal_rules.closing_brace
                universal_rules.ins_space universal_rules.money_quantity quantities universal_rules.ins_space
                (
                  (major_country_plural_markup universal_rules.style3) |
                  (major_single_markup (universal_rules.style1 | universal_rules.style2)?)
                );

# Major part only.
# Includes minor parts of value zero - you don't say
# "twaalf dollar en nul cent" even if the .00 is written.
amount_major_only =
  universal_rules.money_amount universal_rules.opening_brace
  (universal_rules.decimal_negative ins_min)?
  universal_rules.decimal_integer universal_rules.quote c.CARDINAL universal_rules.quote
  (universal_rules.decimal_fraction universal_rules.quote ("0" : "")+ universal_rules.quote)?
  (universal_rules.decimal_exponent discard_number)?
  universal_rules.closing_brace
;

major_only =
  (
    amount_major_only universal_rules.ins_space major_single_markup
    (universal_rules.style1 | universal_rules.style2)?
  ) | (
    (
      ((amount_major_only @ "one") universal_rules.ins_space major_country_single_markup) |
      (amount_major_only universal_rules.ins_space major_country_plural_markup<10>)
    )
    universal_rules.style3
  )
;

amount_minor_only =
  universal_rules.money_amount universal_rules.opening_brace
  (universal_rules.decimal_integer universal_rules.quote ("0" : "")+ universal_rules.quote)?
   universal_rules.decimal_fraction universal_rules.quote
   (non_zero_short_germanic_factorized_number @ c.CARDINAL)
  universal_rules.quote
  (universal_rules.decimal_exponent discard_number)?
  universal_rules.closing_brace
;

minor_only =
  (
    (
      ((amount_minor_only @ "one") universal_rules.ins_space minor_single_markup) |
      (amount_minor_only universal_rules.ins_space minor_plural_markup<10>)
    )
    (universal_rules.style1 | universal_rules.style2)?
  ) | (
    (
      ((amount_minor_only @ "one") universal_rules.ins_space minor_country_single_markup) |
      (amount_minor_only universal_rules.ins_space minor_country_plural_markup<10>)
    )
    universal_rules.style3
  )
;

export MONEY = Optimize[(style1 | style2 | style3 | with_quantity | major_only | minor_only)];

export MONEY_MARKUP = Optimize[
  universal_rules.money
  universal_rules.opening_brace
  (style1 | style2 | style3 | with_quantity | major_only | minor_only)
  universal_rules.closing_brace
];

# Reduplication rule for money; reduplicate for any case that has non-zero
# integer and fractional parts.
# Never for anything with quantity because that's just read like a decimal.
redup =
  universal_rules.money
  universal_rules.opening_brace
  universal_rules.money_amount
  universal_rules.opening_brace
  universal_rules.decimal_negative?
  universal_rules.decimal_integer
  universal_rules.quote
  c.CARDINAL
  universal_rules.quote
    universal_rules.decimal_fraction
  universal_rules.quote
    (non_zero_short_germanic_factorized_number @ c.CARDINAL)
  universal_rules.quote
  (universal_rules.decimal_exponent
   universal_rules.quote
     c.CARDINAL
   universal_rules.quote)?
  universal_rules.closing_brace
  universal_rules.money_currency
  universal_rules.quote
    universal_rules.kLower+
  universal_rules.quote
  universal_rules.any_style?
  universal_rules.closing_brace
;

export REDUP = Optimize[Project[redup, 'input']];
